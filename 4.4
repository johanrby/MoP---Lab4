/*
 * 	startup.c
 *
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}
/* ---- Registers - GPIO ---- */
#define GPIO_D				0x40020C00
#define GPIO_D_MODER		((volatile unsigned int *)		(GPIO_D))
#define GPIO_D_ODR			((volatile unsigned short *)	(GPIO_D+0x14))
#define GPIO_D_ODR_LOW 		((volatile unsigned char *)	 	(GPIO_D+0x14))	
#define GPIO_D_ODR_HIGH 	((volatile unsigned char *)		(GPIO_D+0x15))
#define GPIO_D_IDR_LOW		((volatile unsigned char *)		(GPIO_D+0x10))	
#define GPIO_D_IDR_HIGH		((volatile unsigned char *)		(GPIO_D+0x11))
#define GPIO_E				0x40021000
#define GPIO_E_MODER		((volatile unsigned int *)		(GPIO_E))
#define GPIO_E_ODR_LOW 		((volatile unsigned char *)	 	(GPIO_E+0x14))	
#define GPIO_E_ODR_HIGH 	((volatile unsigned char *)		(GPIO_E+0x15))
#define GPIO_E_IDR_LOW		((volatile unsigned char *)		(GPIO_E+0x10))	
#define GPIO_E_IDR_HIGH		((volatile unsigned char *)		(GPIO_E+0x11))


#define SYSCFG_BASE			((volatile unsigned int*) 0x40013800)
#define SYSCFG_EXTICR1 		((volatile unsigned int*) 0x40013808)

#define     EXTI_IMR        ((volatile unsigned int*)  0x40013C00)
#define     EXTI_FTST       ((volatile unsigned int*)  0x40013C0C)
#define     EXTI_RTSR       ((volatile unsigned int*)  0x40013C08)
#define     EXTI_PR         ((volatile unsigned int*)  0x40013C14)

#define     EXTI3_IRQVEC       ((void (**) (void) ) 0x2001C064)
#define     EXTI2_IRQVEC       ((void (**) (void) ) 0x2001C060)
#define     EXTI1_IRQVEC       ((void (**) (void) ) 0x2001C05C)
#define     EXTI0_IRQVEC       ((void (**) (void) ) 0x2001C058)
#define     EXTI3_ISER0        ((void (**) (void) ) 0xE000E100)

#define NVIC 				0xE000E100
#define NVIC_ISER0			((volatile unsigned int *) 0xE000E100)
#define NVIC_ISER1			((volatile unsigned int *) 0xE000E104)
#define NVIC_ISER2			((volatile unsigned int *) 0xE000E108)

#define NVIC_EXTI3_IRQ_BPOS		(1 << 9)	// avbrotssvektornumret
#define NVIC_EXTI2_IRQ_BPOS		(1 << 8)	// avbrotssvektornumret
#define NVIC_EXTI1_IRQ_BPOS		(1 << 7)	// avbrotssvektornumret
#define NVIC_EXTI0_IRQ_BPOS		(1 << 6)	// avbrotssvektornumret

#define EXTI3_IRQ_BPOS	8
#define EXTI2_IRQ_BPOS	4
#define EXTI1_IRQ_BPOS	2
#define EXTI0_IRQ_BPOS	1




void irq_EXTI0(void){
	return 0;
}
void irq_EXTI1(void){
	return 0;
}
void irq_EXTI2(void){
	return 0;
}




	
void irq_handler(void){
	return 0;
}
	
	
	
void app_init( void ){
	* GPIO_D_MODER = 0x00005555;  					// Port D: pin0-7 är utport
	* GPIO_E_MODER = 0x1500;						// Port E: pin4-6 är utport
	
	*SYSCFG_EXTICR1 &= 0x0FFF;  // Nollställ fält
	*SYSCFG_EXTICR1 |= 0x0444;  // PE3->EXTI2,EXTI1,EXTI0

	/* Bestäm hur avbrott ska genereras med EXTI2,1 och 0 */
	*EXTI_IMR |= EXTI2_IRQ_BPOS + EXTI1_IRQ_BPOS + EXTI0_IRQ_BPOS;		// Aktivera genom att ettställa motsvarande bit i EXTI_IMR
	*EXTI_RTSR |= EXTI2_IRQ_BPOS +EXTI1_IRQ_BPOS + EXTI0_IRQ_BPOS; 		// Aktivera triggvillkor "positiv flank"
	*EXTI_FTST &= ~(EXTI2_IRQ_BPOS +EXTI1_IRQ_BPOS + EXTI0_IRQ_BPOS);	// Maskera falling trigger
	
	
	*((void (**) (void) ) EXTI2_IRQVEC ) = irq_handler;			// Avbrottsvektor
	*((void (**) (void) ) EXTI1_IRQVEC ) = irq_handler;			// Avbrottsvektor
	*((void (**) (void) ) EXTI0_IRQVEC ) = irq_handler;			// Avbrottsvektor
	
	
	*NVIC_ISER0 |= NVIC_EXTI2_IRQ_BPOS;							// Aktivera NVIC för EXTI2
	*NVIC_ISER0 |= NVIC_EXTI1_IRQ_BPOS;							// Aktivera NVIC för EXTI1
	*NVIC_ISER0 |= NVIC_EXTI0_IRQ_BPOS;							// Aktivera NVIC för EXTI0


	
}// init


static volatile unsigned int count = 0;
void main(void){
	app_init();
	while( 1 ){
		*GPIO_D_ODR_LOW = count; 		// utport = count		
	}
}// main
