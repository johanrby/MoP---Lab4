/*startup.c
 */
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}

#define GPIO_D				0x40020C00
#define GPIO_D_MODER		((volatile unsigned int *)		(GPIO_D))
#define GPIO_D_OTYPER		((volatile unsigned short *)	(GPIO_D+0x05))
#define GPIO_D_PUPDR		((volatile unsigned short *) 	(GPIO_D+0x0E))
#define GPIO_D_OSPEEDR		((volatile unsigned int *)		(GPIO_D+0x08))
#define GPIO_D_ODR			((volatile unsigned short *)	(GPIO_D+0x14))
#define GPIO_D_ODR_LOW 		((volatile unsigned char *)	 	(GPIO_D+0x14))	
#define GPIO_D_ODR_HIGH 	((volatile unsigned char *)		(GPIO_D+0x15))
#define GPIO_D_IDR_LOW		((volatile unsigned char *)		(GPIO_D+0x10))	
#define GPIO_D_IDR_HIGH		((volatile unsigned char *)		(GPIO_D+0x11))
#define GPIO_E				0x40021000
#define GPIO_E_MODER		((volatile unsigned int *)		(GPIO_E))
#define GPIO_E_ODR_LOW 		((volatile unsigned char *)	 	(GPIO_E+0x14))	
#define GPIO_E_ODR_HIGH 	((volatile unsigned char *)		(GPIO_E+0x15))
#define GPIO_E_IDR_LOW		((volatile unsigned char *)		(GPIO_E+0x10))	
#define GPIO_E_IDR_HIGH		((volatile unsigned char *)		(GPIO_E+0x11))

#define SYSCFG_EXTICR1 		0x40013808

#define EXTI_IMR        	((volatile unsigned int*) 0x40013C00)
#define EXTI_RTSR       	((volatile unsigned int*) 0x40013C08)
#define EXTI_PR         	((volatile unsigned int*) 0x40013C14)
#define EXTI_FTST			((volatile unsigned int*) 0x40013C0C)

#define NVIC 				0xE000E100
#define NVIC_ISER0			((volatile unsigned int *) 0xE000E100)
#define NVIC_ISER1			((volatile unsigned int *) 0xE000E100)
#define NVIC_ISER2			((volatile unsigned int *) 0xE000E100)
#define NVIC_ISPR0      	((volatile unsigned int *) 0xE000E100)



volatile unsigned int count = 0;

void interrutp_handler(void){
	
	if(	*EXTI_PR & ( 1<<3 )){				// om avbrott från EXTI3
		*EXTI_PR |= (1<<3);					// kvittera(återställ) avbrott från EXTI3, 1 skrivs till motsvarande bit. 

		if(	*GPIO_E_IDR_LOW & (1) ){
			*GPIO_E_ODR_LOW |= (1<<4);		// ettställa 5e biten
			*GPIO_E_ODR_LOW &= ~(1<<4);		// nollställa 5e biten
			count++;	
		}
		
		if ( *GPIO_E_IDR_LOW & (2)){
			*GPIO_E_ODR_LOW |= (1<<5); 		// ettställa 6e biten
			*GPIO_E_ODR_LOW &= ~(1<<5);		// nollställa 6e biten
			count = 0;	
		}
		
		if( *GPIO_E_IDR_LOW & (4)){
			*GPIO_E_ODR_LOW |= (1<<6); 		// ettställa 7e biten
			*GPIO_E_ODR_LOW &= ~(1<<6);		// nollställa 7e biten
			
			if( count > 0 ){
				count = 0;			// släck diodramp
			}
			else{
				count = 255;		// tänd diodramp
			}
		}
	}	
}

void app_init( void ){
	* GPIO_D_MODER = 0x00005555;  					// 0-7 är utport
	* GPIO_E_MODER = 0x1500;
	*((unsigned int *) SYSCFG_EXTICR1) &= 0x0FFF;  // Nollställ fält
	*((unsigned int *) SYSCFG_EXTICR1) |= 0x4000;  // PE3->EXTI3

	/* Bestäm hur avbrott ska genereras med EXTI3 */
	
	*EXTI_IMR |= 8; 			// Aktivera genom att ettställa motsvarande bit i EXTI_IMR
	*EXTI_RTSR |= 8; 			// Aktivera triggvillkor "positiv flank"
	*EXTI_FTST &= ~8;			// Maskera falling trigger
	
	*((void (**) (void) ) 0x2001C064 ) = interrutp_handler;			// Sätter upp avbrottsvektor
	
	*NVIC_ISER0 |= (1<<9);											// Aktivera NVIC för EXTI3
}

void main(void){
	app_init();
	while( 1 )
	{
		*GPIO_D_ODR_LOW = count; 		// utport = count		
	}
}
